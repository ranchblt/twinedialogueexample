local defork = require "defork.defork"
local richtext = require "richtext.richtext"

function init(self)
	msg.post(".", "acquire_input_focus")

	local dialog = defork.load("/assets/dialog.json")		-- with Defork you can easily create and use json dialogs (Twine + Twinson)

	print("Name:", defork.getName())
	print("Start node ID:", defork.getStartNodeID())		-- Defork stores loaded dialog data so you don't have to provide it everytime

	defork.setCurrentNode(defork.getStartNodeID())			-- sets current node ID and store it in Defork script for convenience

	print("Text:", defork.getText())						-- so you don't have to provide ID everytime if not needed
	print("Tags:", defork.getTags())						-- use Twine's tags to get more information about dialog, e.g. speaker, emotion

	for i,_ in ipairs(defork.getOptions()) do
		print("Option "..i..":", defork.getOptionText(i))	-- every option contains text and id that links option to the next node
		print("Leads to:", defork.getOptionLink(i))
	end

	self.node = gui.get_node("box")							-- you can use Rich Text to easily display and manage dialog data
	defork.setRichtextParent(self.node)						-- remember to set parent node for Tich Text, it is also saved inside Defork

	self.text =defork.getText(defork.getStartNodeID())		-- you can get text of a specific dialog's node ID

	local new_settings = {}
	new_settings.width = 250
	defork.setRichtextSettings(new_settings)				-- you can provide custom settings for Rich Text

	self.image = "<img=main:icon_48/>"						-- you can attach any image/portrait/emoticon from gui texture
	self.text = defork.createOnePanelText(self.text, defork.getOptions(1), "Estel", "orange", self.image) -- you can use custom template

	defork.setRichtextFont("system_font")					-- you can save gui font to Defork, so it can be used everytime it's needed
	self.words = defork.showRichtext(self.text)				-- you can use Rich Text for showing a text (customized here)


	local function my_check_tags(string)					-- you can write custom tags checking for rich text
		local authors = richtext.tagged(string, "author")	-- tag <author>  (enlarged slightly in y)
		for _,author in pairs(authors) do
			local scale = gui.get_scale(author.node)
			scale.y = scale.y * 1.1
			gui.set_scale(author.node, scale)
		end
	end
	--defork.showRichtext(text, self.node, my_check_tags)	-- you can apply your custom tags checking function
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
	local options = defork.getOptions(defork.getCurrentNodeID()) or nil		-- HANDLE MESSAGES

	if options then
		for i,selected in ipairs(options) do
			if message_id == hash("option_"..i) then
				self.node = defork.refreshGUI(self.node)		-- delete the old node and create a new empty node, set the parent too
				new_dialog = selected.pid						-- go to the dialog's node linked by the selected option

				-- set the current node ID in the defork script, so you don't have to provide it everytime
				defork.setCurrentNode(new_dialog)self.text = defork.getText()

				-- create formatted text with colored speaker, image, speech and options
				local speaker = defork.getTags()[1]
				self.text = defork.createOnePanelText(self.text, defork.getOptions(), speaker, "orange", self.image)

				-- show Rich Text in a parent node and update words
				self.words = defork.showRichtext(self.text, self.node)
				print("Clicked option no: ", i)
			end
		end
	end
end

function on_input(self, action_id, action)
	defork.on_input(self.words, action)		-- this will answer with a message to this script containing link name
end